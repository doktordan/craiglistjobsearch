var
	cheerio = require('cheerio'),
	request = require('./request'),

	baseHost = '',
	defaultRequestOptions = {
		hostname : '',
		path : '',
		secure : true
	},
	searchMaxAsk = '&maxAsk=',
	searchMinAsk = '&minAsk=',
	searchPath = '';
var initialize = (function (self) {
	'use strict';
	self = self || {};
	self.options = {};

	/*
		Accepts string of HTML and parses that string to find all pertinent listings.
	*/
	function getListings (options, html) {
		var
			$ = cheerio.load(html),
			listing = {},
			listings = [];
		$('div.content').find('p.row').each(function (i, element) {
			var thisurl = $(element).find('span.pl a').attr('href');
			if(thisurl.indexOf("http") == -1){
				thisurl = (options.secure ? 'https://' : 'http://') +
				options.hostname + thisurl;
			}
			listing = {
				category : $(element)
					.find('span.l2 a.gc')
					.text(),
				coordinates : {
					lat : $(element).attr('data-latitude'),
					lon : $(element).attr('data-longitude')
				},
				date : $(element)
					.find('span.date')
					.text(),
				hasPic : ($(element)
					.find('span.l2 span.p')
					.text()
					.trim()) !== '',
				location : $(element)
					.find('span.pnr small')
					.text()
					.replace(/[\(,\)]/g, ''), // santize
				pid : $(element)
					.attr('data-pid'),
				price : $(element)
					.find('span.l2 span.price')
					.text()
					.replace(/^\&\#x0024\;/g, ''), // sanitize
				title : $(element)
					.find('span.pl a')
					.text(),
				url :thisurl
			};

			// make sure lat / lon is valid
			if (typeof listing.coordinates.lat === 'undefined' ||
				typeof listing.coordinates.lon === 'undefined') {
				delete listing.coordinates;
			}
			listings.push(listing);
		});

		return listings;
	}
		/*
		Accepts string of HTML and parses that string to find all pertinent listings.
	*/
	function getCities (options, html) {
		var
			$ = cheerio.load(html),
			city = {},
			cities = [];
		$('div.colmask').first().find('div.box > ul > li').each(function (i, element) {
			var namev = $(element).find('a').html();
			namev= namev.charAt(0).toUpperCase()+namev.slice(1);
			var datav =  $(element).find('a').attr('href');
			datav = datav.replace('.craigslist.org','');
			datav = datav.replace('http://','');
			city = {
				name : namev,
				data : datav
			};
			cities.push(city);
		});
		cities.sort(function(a, b) { return (a[0] < b[0] ? -1 : (a[0] > b[0] ? 1 : 0)); });
		return cities;
	}

	function getSpecifics (options, html) {
		var
			$ = cheerio.load(html),
			job = {},
			jobs = [];
		$(options.element).find('li').each(function (i, element) {
			job = {
				href : $(element).find('a').attr('href'),
				text : $(element).find('a > span.txt').text()
			};
			jobs.push(job);
		});
		return jobs;
	}

	/*
		Accepts options, iterates through the known acceptable keys from defaultOptions
		and if found in input options, uses that. If not found in input options to method,
		falls back to the options specified when the module was initialized. If not found
		in initialization options, uses the default options setting. All keys provided in
		the input options variable are retained.
	*/
	function getRequestOptions (options, query) {
		var requestOptions = JSON.parse(JSON.stringify(defaultRequestOptions));
		// set path
		if (options.cities){
			baseHost = 'boston.craigslist.org';
			searchPath = '/about/sites';
			requestOptions.path = searchPath;
			requestOptions.hostname =
			(options.city || self.options.city || '') +
			baseHost;
			requestOptions.cities = options.cities;
	   }
	   else if (options.specifics){
	   		baseHost = '.craigslist.org';
	   		requestOptions.selectingElement = options.element;
			requestOptions.hostname =
			(options.city || self.options.city || '') +
			baseHost;
			searchPath = '/';
			requestOptions.path = searchPath + encodeURIComponent(query);

			// ensure default options are set, even if omitted from input options
			requestOptions.hostname =
				(options.city || self.options.city || '') +
				baseHost;
		}else{
			baseHost = '.craigslist.org';
			searchPath = options.type+'?sort=rel&query=';
			requestOptions.path = searchPath + encodeURIComponent(query);

			// ensure default options are set, even if omitted from input options
			requestOptions.hostname =
				(options.city || self.options.city || '') +
				baseHost;
		}

		// preserve any extraneous input option keys (may have addition instructions for underlying request object)
		Object.keys(options).forEach(function (key) {
			if (key !== 'maxAsk' &&
				key !== 'minAsk' &&
				typeof requestOptions[key] === 'undefined' &&
				typeof defaultRequestOptions[key] === 'undefined') {
				requestOptions[key] = options[key];
			}
		});
	

		// add min and max asking price
		if (typeof options.minAsk !== 'undefined') {
			//requestOptions.path += searchMinAsk + options.minAsk;
		}

		if (typeof options.maxAsk !== 'undefined') {
			//requestOptions.path += searchMaxAsk + options.maxAsk;
		}

		return requestOptions;
	}

	/*
		options = {
			city : '',
			maxAsk : '',
			minAsk : '',
		}
	*/
	self.search = function (options, query, callback) {
		if (typeof query === 'function' && typeof callback === 'undefined') {
			callback = query;
			query = options;
			options = {};
		}
		options = getRequestOptions(options, query);
		self.request.get(options, function (err, data) {
			if (err) {
				return callback(err);
			}
			if (options.cities===true){
				return callback(null, getCities(options, data));
			}else if (options.specifics===true){
			 	return callback(null, getSpecifics(options, data));
			}else{
			 	return callback(null, getListings(options, data));
			}
		});
	};

	/*
		the module
	*/
	return function (options) {
		options = options || {};

		self.options = options;
		self.request = request.initialize();
		return self;
	};
}({}));

exports = module.exports = initialize;
exports.initialize = initialize;
